xv6 is a re-implementation of Dennis Ritchie's and Ken Thompson's Unix
Version 6 (v6). xv6 loosely follows the structure and style of v6,
but is implemented for a modern RISC-V multiprocessor using ANSI C.

xv6 は Dennis Ritchie と Ken Thompson による Unix Version 6（v6）の再実装
xv6 は v6 の構造とスタイルを緩やかに踏襲しているが、現代の RISC-V マルチプロセッサ向けに ANSI C で実装されている

    - Unix オペレーティングシステムの基本的なインタフェースを提供
    - Unix の内部設計を模倣

xv6の制限

    1.  ユーザの概念がない
        全てのプロセスがrootとして実行される。Unixの多くのセキュリティ機能やユーザ管理機能は提供されていない。

----------------------------------------------------------------------------------------------------

オペレーティングシステム（OS）の主な役割は、次の2つ

	1.	複数のプログラムが1台のコンピュータを共有
        これにより、同時に複数のプログラムが実行でき、リソースの効率的な利用が可能にする
	2.	ハードウェア単独よりも便利なサービスの提供
        OSはハードウェアの詳細を抽象化し、プログラムがハードウェアの違いを意識することなく動作できるようにする


インタフェース設計

    オペレーティングシステムは，あるインタフェースを介して，ユーザープログラム にサービスを提供する。
    このインタフェース設計は難しい。うまい抽象化の仕組みが必要。
        ↓
    少数のメカニズムに依存するインタフェースを設計
    基本的な機能に限定し、それらの組み合わせによって多様な操作を実現する

    Unixは成功
    現代的なOS (BSD, Linux, Mac OS X, Solaris, Microsoft Windows) がUnix的なインタフェースを持つ


主要なシステムコール

    xstatus は、プロセスの終了ステータスを表す引数

	1.	fork():
	    新しいプロセスを作成します。親プロセスのメモリをコピーして子プロセスを作ります。

	2.	exit(xstatus):
	    現在のプロセスを終了します。終了ステータスをxstatusで指定します。
        終了ステータスは通常、0が成功、非0が失敗を示します。

	3.	wait(*xstatus):
	    子プロセスの終了を待ち、終了コードをxstatusにコピーします。

	4.	kill(pid):
	    指定されたpidのプロセスを終了します。

	5.	getpid():
	    現在のプロセスのプロセスID（PID）を返します。

	6.	sleep(n):
	    nクロック刻みの間、プロセスをスリープ（休止）させます。

	7.	exec(filename, *argv):
	    指定されたファイルをロードして実行します。引数はargvで指定します。

	8.	sbrk(n):
	    プロセスのメモリをnバイト増やします。

	9.	open(filename, flags):
	    ファイルを開きます。flagsで読み書きを指定します。

	10.	read(fd, buf, n):
	    開いているファイルからnバイトを読み、bufに入れます。

	11.	write(fd, buf, n):
	    開いているファイルにnバイトを書き込みます。

	12.	close(fd):
	    開いているファイルを表すファイルディスクリプタ（fd）を解放します。

	13.	dup(fd):
	    ファイルディスクリプタ（fd）を複製します。

	14.	pipe(p):
	    パイプを作り、そのファイルディスクリプタ（fd）をpに入れます。
        プロセス間通信 (IPC) の実現
        p は、2つのファイルディスクリプタ（fd[0] と fd[1]）を格納するための配列
	        • p[0] は読み取り用のファイルディスクリプタ
	        • p[1] は書き込み用のファイルディスクリプタ

	15.	chdir(dirname):
	    カレントディレクトリを変更します。

	16.	mkdir(dirname):
	    新しいディレクトリを作成します。

	17.	mknod(name, major, minor):
	    デバイスファイルを作成します。
        major番号は、デバイスドライバを識別 (カーネルは、major番号を使ってどのデバイスドライバがリクエストを処理するかを決定)
        minor番号は、特定のデバイスドライバ内での個々のデバイスを識別 (例えば、同じ種類のディスクドライバを使う複数のディスクの区別)

        mknod /dev/sda1 b 8 1
            • /dev/sda1は新しいデバイスファイルの名前です。
	        • bはブロックデバイスを示します（cはキャラクタデバイスを示します）。
	        • 8はmajor番号で、ここではSCSIディスクドライバを示します。
	        • 1はminor番号で、特定のディスクのパーティション1を示します。


	18.	fstat(fd):
	    開いているファイルに関する情報を返します。

	19.	link(f1, f2):
	    ファイルf1の別名（ハードリンク）としてf2を作成します。

	20.	unlink(filename):
	    ファイルを消去します。


プロセス

    実行中の各プログラム(プロセス)は「命令列を含むメモリ」「データ」「スタック」を持つ

        - 命令列は，プログラムの計算を実現する。
        - データは，計算が対象とする変数のこと。
        - スタックはプログラムのプロシージャ呼び出し (procedure call) を管理する。

    プロセスがカーネルのサービスを呼び出すときは，オペレーティングシステムのインタフェースを介してプロシージャ呼び出し (システムコール)

----------------------------------------------------------------------------------------------------

ACKNOWLEDGMENTS

xv6 is inspired by John Lions's Commentary on UNIX 6th Edition (Peer
to Peer Communications; ISBN: 1-57398-013-7; 1st edition (June 14,
2000)). See also https://pdos.csail.mit.edu/6.1810/, which provides
pointers to on-line resources for v6.

The following people have made contributions: Russ Cox (context switching,
locking), Cliff Frey (MP), Xiao Yu (MP), Nickolai Zeldovich, and Austin
Clements.

We are also grateful for the bug reports and patches contributed by
Takahiro Aoyagi, Silas Boyd-Wickizer, Anton Burtsev, carlclone, Ian
Chen, Dan Cross, Cody Cutler, Mike CAT, Tej Chajed, Asami Doi,
eyalz800, Nelson Elhage, Saar Ettinger, Alice Ferrazzi, Nathaniel
Filardo, flespark, Peter Froehlich, Yakir Goaron, Shivam Handa, Matt
Harvey, Bryan Henry, jaichenhengjie, Jim Huang, Matúš Jókay, John
Jolly, Alexander Kapshuk, Anders Kaseorg, kehao95, Wolfgang Keller,
Jungwoo Kim, Jonathan Kimmitt, Eddie Kohler, Vadim Kolontsov, Austin
Liew, l0stman, Pavan Maddamsetti, Imbar Marinescu, Yandong Mao, Matan
Shabtay, Hitoshi Mitake, Carmi Merimovich, Mark Morrissey, mtasm, Joel
Nider, Hayato Ohhashi, OptimisticSide, Harry Porter, Greg Price, Jude
Rich, segfault, Ayan Shafqat, Eldar Sehayek, Yongming Shen, Fumiya
Shigemitsu, Cam Tenny, tyfkda, Warren Toomey, Stephen Tu, Rafael Ubal,
Amane Uehara, Pablo Ventura, Xi Wang, WaheedHafez, Keiichi Watanabe,
Nicolas Wolovick, wxdao, Grant Wu, Jindong Zhang, Icenowy Zheng,
ZhUyU1997, and Zou Chang Wei.

The code in the files that constitute xv6 is
Copyright 2006-2022 Frans Kaashoek, Robert Morris, and Russ Cox.

ERROR REPORTS

Please send errors and suggestions to Frans Kaashoek and Robert Morris
(kaashoek,rtm@mit.edu). The main purpose of xv6 is as a teaching
operating system for MIT's 6.1810, so we are more interested in
simplifications and clarifications than new features.

BUILDING AND RUNNING XV6

You will need a RISC-V "newlib" tool chain from
https://github.com/riscv/riscv-gnu-toolchain, and qemu compiled for
riscv64-softmmu. Once they are installed, and in your shell
search path, you can run "make qemu".
